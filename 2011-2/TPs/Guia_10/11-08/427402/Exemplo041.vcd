$date
	Fri Nov 04 19:20:36 2011
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Exemplo0041 $end
$var wire 1 ! clk $end
$scope module CLK1 $end
$var reg 1 " clk $end
$upscope $end
$upscope $end
$scope module Teste_Exercicio01 $end
$var wire 4 # resp [3:0] $end
$var reg 4 $ a [3:0] $end
$var reg 1 % addr $end
$var reg 1 & clk $end
$var reg 1 ' rw $end
$scope module M1 $end
$var wire 1 ( Adr $end
$var wire 1 ) RW $end
$var wire 1 * clk $end
$var wire 4 + int [3:0] $end
$var wire 4 , resp [3:0] $end
$scope module M1 $end
$var wire 1 ( addr $end
$var wire 1 * clk $end
$var wire 1 - clk2 $end
$var wire 1 . int $end
$var wire 1 / qnot $end
$var wire 1 ) rw $end
$var wire 1 0 s $end
$var wire 1 1 s2 $end
$scope module JK1 $end
$var wire 1 - clk $end
$var wire 1 . j $end
$var wire 1 2 k $end
$var reg 1 3 q $end
$var reg 1 4 qnot $end
$upscope $end
$upscope $end
$scope module M2 $end
$var wire 1 ( addr $end
$var wire 1 * clk $end
$var wire 1 5 clk2 $end
$var wire 1 6 int $end
$var wire 1 7 qnot $end
$var wire 1 ) rw $end
$var wire 1 8 s $end
$var wire 1 9 s2 $end
$scope module JK1 $end
$var wire 1 5 clk $end
$var wire 1 6 j $end
$var wire 1 : k $end
$var reg 1 ; q $end
$var reg 1 < qnot $end
$upscope $end
$upscope $end
$scope module M3 $end
$var wire 1 ( addr $end
$var wire 1 * clk $end
$var wire 1 = clk2 $end
$var wire 1 > int $end
$var wire 1 ? qnot $end
$var wire 1 ) rw $end
$var wire 1 @ s $end
$var wire 1 A s2 $end
$scope module JK1 $end
$var wire 1 = clk $end
$var wire 1 > j $end
$var wire 1 B k $end
$var reg 1 C q $end
$var reg 1 D qnot $end
$upscope $end
$upscope $end
$scope module M4 $end
$var wire 1 ( addr $end
$var wire 1 * clk $end
$var wire 1 E clk2 $end
$var wire 1 F int $end
$var wire 1 G qnot $end
$var wire 1 ) rw $end
$var wire 1 H s $end
$var wire 1 I s2 $end
$scope module JK1 $end
$var wire 1 E clk $end
$var wire 1 F j $end
$var wire 1 J k $end
$var reg 1 K q $end
$var reg 1 L qnot $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module dff $end
$var wire 1 M clk $end
$var wire 1 N d $end
$var reg 1 O q $end
$var reg 1 P qnot $end
$upscope $end
$scope module srff $end
$var wire 1 Q clk $end
$var wire 1 R r $end
$var wire 1 S s $end
$var reg 1 T q $end
$var reg 1 U qnot $end
$upscope $end
$scope module tff $end
$var wire 1 V clear $end
$var wire 1 W clk $end
$var wire 1 X preset $end
$var wire 1 Y t $end
$var reg 1 Z q $end
$var reg 1 [ qnot $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x[
xZ
zY
zX
zW
zV
xU
xT
zS
zR
zQ
xP
xO
zN
zM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
bx ,
bx +
x*
x)
x(
x'
x&
x%
bx $
bx #
0"
0!
$end
#1
1J
02
0:
0B
0F
1.
16
1>
0-
05
0=
0E
0&
0*
b1111 $
b1111 +
1'
1)
1%
1(
#2
10
18
1@
0H
b111 #
b111 ,
04
0/
13
11
0<
07
1;
19
0D
0?
1C
1A
1L
1G
0K
0I
1-
15
1=
1E
1&
1*
#3
0J
1B
1F
0-
05
0=
0E
0>
0&
0*
b11 $
b11 +
#4
0@
1H
b1011 #
b1011 ,
1D
1?
0C
0A
0L
0G
1K
1I
1-
15
1=
1E
1&
1*
#5
0-
05
0=
0E
0&
0*
#12
1"
1!
#24
0"
0!
#36
1"
1!
#48
0"
0!
#60
1"
1!
#72
0"
0!
#84
1"
1!
#96
0"
0!
#108
1"
1!
#120
0"
0!
