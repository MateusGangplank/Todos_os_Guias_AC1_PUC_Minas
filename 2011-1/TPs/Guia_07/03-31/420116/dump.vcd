$date
	Wed Mar 30 11:23:47 2011
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 1 ! CARRY $end
$var wire 1 " EQUALS $end
$var wire 1 # GREATER $end
$var wire 1 $ LC $end
$var wire 1 % OVERFLOW $end
$var wire 5 & S [4:0] $end
$var wire 1 ' SMALLER $end
$var wire 1 ( ZERO $end
$var reg 5 ) A [4:0] $end
$var reg 5 * B [4:0] $end
$var reg 3 + OP_CODE [2:0] $end
$scope module ALU $end
$var wire 5 , A [4:0] $end
$var wire 1 - ADDER_CARRY $end
$var wire 5 . ADDER_S [4:0] $end
$var wire 1 / AND_S $end
$var wire 5 0 B [4:0] $end
$var wire 5 1 BITWISE_AND_S [4:0] $end
$var wire 5 2 BITWISE_NOT_S [4:0] $end
$var wire 5 3 BITWISE_OR_S [4:0] $end
$var wire 1 ! CARRY $end
$var wire 1 4 DECREMENT_CARRY $end
$var wire 5 5 DECREMENT_S [4:0] $end
$var wire 1 " EQUALS $end
$var wire 1 # GREATER $end
$var wire 1 6 INCREMENT_CARRY $end
$var wire 5 7 INCREMENT_S [4:0] $end
$var wire 1 $ LOGIC_COMP $end
$var wire 1 8 NOT_S $end
$var wire 3 9 OP_CODE [2:0] $end
$var wire 1 : OR_S $end
$var wire 1 % OVERFLOW $end
$var wire 1 ; OVERFLOW_MUX_S $end
$var wire 5 < S [4:0] $end
$var wire 1 ' SMALLER $end
$var wire 1 = SUB_BORROW $end
$var wire 1 > SUB_OVERFLOW $end
$var wire 5 ? SUB_S [4:0] $end
$var wire 1 @ SUM_OVERFLOW $end
$var wire 1 A S_OVERFLOW $end
$var wire 5 B TWOS_COMPLEMENT_S [4:0] $end
$var wire 1 ( ZERO $end
$scope module ADDER $end
$var wire 5 C A [4:0] $end
$var wire 5 D B [4:0] $end
$var wire 1 - C_OUT $end
$var wire 5 E S [4:0] $end
$scope module ADDER0 $end
$var wire 1 F A $end
$var wire 1 G B $end
$var wire 1 H C_OUT $end
$var wire 1 I S $end
$upscope $end
$scope module ADDER1 $end
$var wire 1 J A $end
$var wire 1 K B $end
$var wire 1 H C_IN $end
$var wire 1 L C_OUT $end
$var wire 1 M S $end
$upscope $end
$scope module ADDER2 $end
$var wire 1 N A $end
$var wire 1 O B $end
$var wire 1 L C_IN $end
$var wire 1 P C_OUT $end
$var wire 1 Q S $end
$upscope $end
$scope module ADDER3 $end
$var wire 1 R A $end
$var wire 1 S B $end
$var wire 1 P C_IN $end
$var wire 1 T C_OUT $end
$var wire 1 U S $end
$upscope $end
$scope module ADDER4 $end
$var wire 1 V A $end
$var wire 1 W B $end
$var wire 1 T C_IN $end
$var wire 1 - C_OUT $end
$var wire 1 X S $end
$upscope $end
$upscope $end
$scope module SUBTRACTOR $end
$var wire 5 Y A [4:0] $end
$var wire 5 Z B [4:0] $end
$var wire 1 = B_OUT $end
$var wire 5 [ S [4:0] $end
$scope module SUB0 $end
$var wire 1 \ A $end
$var wire 1 ] B $end
$var wire 1 ^ C_OUT $end
$var wire 1 _ S $end
$upscope $end
$scope module SUB1 $end
$var wire 1 ` A $end
$var wire 1 a B $end
$var wire 1 ^ B_IN $end
$var wire 1 b B_OUT $end
$var wire 1 c S $end
$upscope $end
$scope module SUB2 $end
$var wire 1 d A $end
$var wire 1 e B $end
$var wire 1 b B_IN $end
$var wire 1 f B_OUT $end
$var wire 1 g S $end
$upscope $end
$scope module SUB3 $end
$var wire 1 h A $end
$var wire 1 i B $end
$var wire 1 f B_IN $end
$var wire 1 j B_OUT $end
$var wire 1 k S $end
$upscope $end
$scope module SUB4 $end
$var wire 1 l A $end
$var wire 1 m B $end
$var wire 1 j B_IN $end
$var wire 1 = B_OUT $end
$var wire 1 n S $end
$upscope $end
$upscope $end
$scope module TWOS_COMPLEMENT $end
$var wire 5 o A [4:0] $end
$var wire 5 p BITWISE_NOT [4:0] $end
$var wire 5 q S [4:0] $end
$scope module ADDER0 $end
$var wire 5 r A [4:0] $end
$var wire 5 s B [4:0] $end
$var wire 1 t C_OUT $end
$var wire 5 u S [4:0] $end
$scope module ADDER0 $end
$var wire 1 v A $end
$var wire 1 w B $end
$var wire 1 x C_OUT $end
$var wire 1 y S $end
$upscope $end
$scope module ADDER1 $end
$var wire 1 z A $end
$var wire 1 { B $end
$var wire 1 x C_IN $end
$var wire 1 | C_OUT $end
$var wire 1 } S $end
$upscope $end
$scope module ADDER2 $end
$var wire 1 ~ A $end
$var wire 1 !" B $end
$var wire 1 | C_IN $end
$var wire 1 "" C_OUT $end
$var wire 1 #" S $end
$upscope $end
$scope module ADDER3 $end
$var wire 1 $" A $end
$var wire 1 %" B $end
$var wire 1 "" C_IN $end
$var wire 1 &" C_OUT $end
$var wire 1 '" S $end
$upscope $end
$scope module ADDER4 $end
$var wire 1 (" A $end
$var wire 1 )" B $end
$var wire 1 &" C_IN $end
$var wire 1 t C_OUT $end
$var wire 1 *" S $end
$upscope $end
$upscope $end
$upscope $end
$scope module INCREMENT1 $end
$var wire 5 +" A [4:0] $end
$var wire 1 6 C_OUT $end
$var wire 5 ," S [4:0] $end
$scope module ADDER $end
$var wire 5 -" A [4:0] $end
$var wire 5 ." B [4:0] $end
$var wire 1 6 C_OUT $end
$var wire 5 /" S [4:0] $end
$scope module ADDER0 $end
$var wire 1 0" A $end
$var wire 1 1" B $end
$var wire 1 2" C_OUT $end
$var wire 1 3" S $end
$upscope $end
$scope module ADDER1 $end
$var wire 1 4" A $end
$var wire 1 5" B $end
$var wire 1 2" C_IN $end
$var wire 1 6" C_OUT $end
$var wire 1 7" S $end
$upscope $end
$scope module ADDER2 $end
$var wire 1 8" A $end
$var wire 1 9" B $end
$var wire 1 6" C_IN $end
$var wire 1 :" C_OUT $end
$var wire 1 ;" S $end
$upscope $end
$scope module ADDER3 $end
$var wire 1 <" A $end
$var wire 1 =" B $end
$var wire 1 :" C_IN $end
$var wire 1 >" C_OUT $end
$var wire 1 ?" S $end
$upscope $end
$scope module ADDER4 $end
$var wire 1 @" A $end
$var wire 1 A" B $end
$var wire 1 >" C_IN $end
$var wire 1 6 C_OUT $end
$var wire 1 B" S $end
$upscope $end
$upscope $end
$upscope $end
$scope module DECREMENT1 $end
$var wire 5 C" A [4:0] $end
$var wire 1 4 B_OUT $end
$var wire 5 D" S [4:0] $end
$scope module SUB $end
$var wire 5 E" A [4:0] $end
$var wire 5 F" B [4:0] $end
$var wire 1 4 B_OUT $end
$var wire 5 G" S [4:0] $end
$scope module SUB0 $end
$var wire 1 H" A $end
$var wire 1 I" B $end
$var wire 1 J" C_OUT $end
$var wire 1 K" S $end
$upscope $end
$scope module SUB1 $end
$var wire 1 L" A $end
$var wire 1 M" B $end
$var wire 1 J" B_IN $end
$var wire 1 N" B_OUT $end
$var wire 1 O" S $end
$upscope $end
$scope module SUB2 $end
$var wire 1 P" A $end
$var wire 1 Q" B $end
$var wire 1 N" B_IN $end
$var wire 1 R" B_OUT $end
$var wire 1 S" S $end
$upscope $end
$scope module SUB3 $end
$var wire 1 T" A $end
$var wire 1 U" B $end
$var wire 1 R" B_IN $end
$var wire 1 V" B_OUT $end
$var wire 1 W" S $end
$upscope $end
$scope module SUB4 $end
$var wire 1 X" A $end
$var wire 1 Y" B $end
$var wire 1 V" B_IN $end
$var wire 1 4 B_OUT $end
$var wire 1 Z" S $end
$upscope $end
$upscope $end
$upscope $end
$scope module OP_MUX $end
$var wire 5 [" A [4:0] $end
$var wire 5 \" B [4:0] $end
$var wire 5 ]" C [4:0] $end
$var wire 5 ^" D [4:0] $end
$var wire 5 _" E [4:0] $end
$var wire 5 `" F [4:0] $end
$var wire 5 a" G [4:0] $end
$var wire 5 b" H [4:0] $end
$var wire 3 c" SELECTOR [2:0] $end
$var reg 5 d" S [4:0] $end
$upscope $end
$scope module LOGIC_COMPARATOR $end
$var wire 5 e" A [4:0] $end
$var wire 5 f" B [4:0] $end
$var wire 1 $ S $end
$upscope $end
$scope module ARITHMETIC_COMPARATOR $end
$var wire 5 g" A [4:0] $end
$var wire 1 " EQUALS $end
$var wire 1 # GREATER $end
$var wire 1 ' SMALLER $end
$upscope $end
$scope module CARRY_MUX $end
$var wire 1 - A $end
$var wire 1 = B $end
$var wire 1 h" C $end
$var wire 1 i" D $end
$var wire 1 j" E $end
$var wire 1 k" F $end
$var wire 1 6 G $end
$var wire 1 4 H $end
$var wire 3 l" SELECTOR [2:0] $end
$var reg 1 m" S $end
$upscope $end
$scope module OVERFLOW_MUX $end
$var wire 1 @ A $end
$var wire 1 > B $end
$var wire 1 n" C $end
$var wire 1 o" D $end
$var wire 1 p" E $end
$var wire 1 q" F $end
$var wire 1 r" G $end
$var wire 1 s" H $end
$var wire 3 t" SELECTOR [2:0] $end
$var reg 1 u" S $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
zu"
bx t"
0s"
0r"
0q"
0p"
0o"
0n"
zm"
bx l"
0k"
0j"
0i"
0h"
bx g"
bx f"
bx e"
bz d"
bx c"
bx b"
bx a"
bx `"
b0z _"
b0z ^"
b0z ]"
bx \"
bx ["
xZ"
0Y"
xX"
xW"
xV"
0U"
xT"
xS"
xR"
0Q"
xP"
xO"
xN"
0M"
xL"
xK"
xJ"
1I"
xH"
bx G"
b1 F"
bx E"
bx D"
bx C"
xB"
0A"
x@"
x?"
x>"
0="
x<"
x;"
x:"
09"
x8"
x7"
x6"
05"
x4"
x3"
x2"
11"
x0"
bx /"
b1 ."
bx -"
bx ,"
bx +"
x*"
0)"
x("
x'"
x&"
0%"
x$"
x#"
x""
0!"
x~
x}
x|
0{
xz
xy
xx
1w
xv
bx u
xt
b1 s
bx r
bx q
bx p
bx o
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
bx [
bx Z
bx Y
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
bx E
bx D
bx C
bx B
xA
x@
bx ?
x>
x=
bz <
z;
z:
bx 9
z8
bx 7
x6
bx 5
x4
bx 3
bx 2
bx 1
bx 0
z/
bx .
x-
bx ,
bx +
bx *
bx )
x(
x'
bz &
x%
x$
x#
x"
z!
$end
#1
0%
0A
0@
1(
1'
0#
0"
0X
0t
04
1=
1*"
0Z"
1n
1U
0T
0#"
0?"
1S"
1g
0&"
0V"
1j
0P
0|
1'"
0:"
0N"
0W"
0b
1k
1Q
1}
1;"
0B"
0O"
0c
0""
17"
0R"
0$
0M
0f
0>
0L
0-
1y
b11011 B
b11011 q
b11011 u
b11011 `"
0x
06"
0>"
06
0J"
0^
1I
b1101 .
b1101 E
b1101 ["
0H
1_
b11101 ?
b11101 [
b11101 \"
b11101 g"
0v
1z
0~
1$"
1("
03"
b110 7
b110 ,"
b110 /"
b110 a"
12"
0K"
b100 5
b100 D"
b100 G"
b100 b"
0G
0K
0O
1S
0W
0]
0a
0e
1i
0m
b11010 2
b0 1
b1101 3
1F
0J
1N
0R
0V
1\
0`
1d
0h
0l
b11010 p
b11010 r
10"
04"
18"
0<"
0@"
1H"
0L"
1P"
0T"
0X"
0u"
0;
0m"
0!
b1101 d"
b1101 &
b1101 <
b1000 *
b1000 0
b1000 D
b1000 Z
b1000 f"
b101 )
b101 ,
b101 C
b101 Y
b101 o
b101 +"
b101 -"
b101 C"
b101 E"
b101 e"
b0 +
b0 9
b0 c"
b0 l"
b0 t"
#6
1#
0"
0'
1f
0=
0n
0X
0%
1L
1b
0j
0A
0@
0M
1c
0T
1#"
0'"
b10111 B
b10111 q
b10111 u
b10111 `"
0(
0I
1H
0_
1Q
1U
b1100 .
b1100 E
b1100 ["
1g
0k
b110 ?
b110 [
b110 \"
b110 g"
1~
0$"
0;"
1?"
b1010 7
b1010 ,"
b1010 /"
b1010 a"
0S"
1W"
b1000 5
b1000 D"
b1000 G"
b1000 b"
1G
1K
0S
1]
1a
0i
b10110 2
b1 1
b1011 3
0N
1R
0d
1h
b10110 p
b10110 r
08"
1<"
0P"
1T"
0m"
0!
b110 d"
b110 &
b110 <
b11 *
b11 0
b11 D
b11 Z
b11 f"
b1001 )
b1001 ,
b1001 C
b1001 Y
b1001 o
b1001 +"
b1001 -"
b1001 C"
b1001 E"
b1001 e"
b1 +
b1 9
b1 c"
b1 l"
b1 t"
#11
