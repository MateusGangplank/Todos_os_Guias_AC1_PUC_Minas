PUC-Minas - Instituto de Informática
ARQ1 Guia-04
Data de entrega: 21-25/02/2011

Tema: Programação em Verilog

Os comandos básicos em Verilog incluem:
- definir módulos (métodos);
- definir o módulo principal para testes;
- definir instâncias dos módulos (portas, por exemplo); 
- definir os registradores principais;
- definir as conexões de saída;
- definir as ações a serem executadas (programa).

Proposição básica

Guia04 - Capítulo 03
Fazer um programa em Verilog para atender a 
cada uma das situações abaixo,
e complementar com diagramas para simulação em Logisim
envolvendo definições e ações básicas.

01.) Realizar a simulação de um operador de meia-soma
     usando apenas portas NOR
     (modelo tradicional: AND, OR, NOT, AND, s0 e s1)
     DICA: Usar definições de portas da própria linguagem
           para criar novos módulos:

           nor NOR01 (s, x, y);
     
02.) Realizar a simulação de um operador de soma-completa
     usando pelo menos dois subcircuitos de meia-soma
     (modelo compacto: AND, XOR, s0, s1 e s2).
     DICA: Para criar um subcircuito no Logisim, 
           clicar o botão direito sobre o nome do circuito
           e escolher o nome (evitar espaços em branco).
           Observar a seleção do circuito/subcircuito
           de trabalho (lupa).
     
03.) Realizar a simulação de um operador de diferença-completa
     usando pelo menos dois subcircuitos de meia-diferença
     (modelo compacto: AND, XOR, NOT, s0, s1 e s2).
     DICA: Usar subcircuitos no Logisim. 


Extras

04.) Realizar a simulação de um operador de meia-diferença
     usando apenas portas NOR
     (modelo compacto: AND, XOR, NOT, s0 e s1)
     DICA: Usar a definição de porta da própria linguagem
           para criar novos módulos.

05.) Realizar a simulação de um operador de diferença-completa
     usando subcircuitos de meia-diferença 
     feitos apenas com portas NAND
     (modelo compacto: AND, XOR, s0, s1 e s2).
     DICA: Usar subcircuitos no Logisim. 
     

Tarefa

Associar os conceitos de representações de dados e a metodologia
sugerida para o desenvolvimento de programa (passo a passo), para
modificar os modelos propostos (___.v) e introduzir, pouco
a pouco, as modificações necessárias, cuidando de realizar a 
documentação das definições, procedimentos e operações executadas.
Colocar nome e matrícula na documentação e para ser exibido pelo código.

Para pensar a respeito

Qual a estratégia de solução ?
Como definir um método principal que execute essa estratégia ?
Serão necessárias definições prévias (extras) para se obter o resultado ?
Como dividir os passos a serem feitos e organizá-los em que ordem ?
Que informações deverão ser colocadas na documentação ?
Como lidar com os erros de compilação ?
Como lidar com os erros de execução ?


Fontes de informação

apostila (capítulo 1)
exemplos 
bibliografia recomendada
lista de discussão da disciplina
websites


Processo

1 relacionar claramente seus objetivos e
  registrar isso na documentação necessária para o desenvolvimento;

2 organizar as informações de cada proposição de problema:
2.1 escolher os armazenadores de acordo com o tipo apropriado;
2.2 realizar as entradas de dados ou definições iniciais;
2.3 realizar as operações;
2.4 realizar as saídas dos resultados;
2.5 projetar testes para cada operação, considerar casos especiais

3 especificar os métodos es seções:
3.1 definir a identificação do programa na documentação;
3.2 definir a identificação do programador na documentação;
3.3 definir armazenadores necessários (se houver)
3.4 definir a entrada de dados para cada valor
3.5 testar se os dados foram armazenados corretamente
3.6 definir a saída de cada resultado ou (execução de cada ação)
3.7 testar a saída de cada resultado com valores (situações) conhecidas
3.8 definir cada operação
3.9 testar isoladamente cada operação, conferindo os resultados

4 especificar as ações da parte principal:
4.1 definir o cabeçalho para identificação;
4.2 definir as constantes, armazenadores e dados auxiliares (se houver);
4.3 definir a estrutura básica de programa que possa permitir a
    execução de vários dos testes programados;

5. realizar os testes isolados de cada operação e
   depois os testes de integração;
5.1 registrar todos os testes realizados.


Dicas

- Digitar os exemplos fornecidos e testá-los.
- Identificar exemplos que possam servir de modelos para os 
  exercícios, e usá-los como sugestões para o desenvolvimento.
- Fazer rascunhos, diagramas e esquemas para orientar o
  desenvolvimento da solução, previamente, antes de começar a
  digitar o novo programa.
- Consultar os modelos de programas e documentação disponíveis.
- Anotar os testes realizados e seus resultados no final do 
  texto do programa, como comentários.
- Anotar erros, dúvidas e observações no final do programa,
  também como comentários.


Conclusão

Analisar cada resultado obtido e avaliar-se ao fim do processo.
